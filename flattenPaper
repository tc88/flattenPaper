#/bin/bash

function help () {
echo " This script prepares a paper source code to be published to arxiv. It needs to be called with the name of the main .tex file (without extension) that is located in the current directory";
echo "";
echo " Usage: flattenPaper texFile pkgPrefix figsDir";
echo " Example usage: flattenPaper paper casper figs";
echo " Here, 'texFile' is a .tex file, 'pkgPrefix' the prefix for any private macro files apart from temf-* macros and 'figsDir' the directory in which all figures are contained.";
echo "";
echo " Supported source files:";
echo " - *.tex, *.sty, *.cls, *.clo, *.bib";
echo "";
echo " Prerequisites:";
echo " - all figures must be contained in one folder according to the input parameter 'figs'";
echo " - different figures must have different names, not only different extensions";
echo " - packages are loaded without using any additional path";
echo " - do not load more than one package for each \usepackage command";
echo " - if standalone figures are used together with the standalone package, they must be included with the \includestandalone macro (see standalone package documentation) instead of \input or \include. The filename of the standalone figure must be given without extension, e.g., 'example' instead of 'example.tex' and the files must be contained in a folder called 'figsStandalone'. Additionally, the standalone package option 'mode=build', 'mode=buildmissing' or 'mode=buildnew' must be used";
echo " - enclose all bib setup lines in the preamble into a beginning line containing BEGIN BIBLIOGRAPHY SETUP and an ending line END BIBLIOGRAPHY SETUP. DO NOT use any other commands than \bibliographystyle, \bibliography and \printbibliography within \begin{document} and \end{document}.";
echo " - no TUD colors must be used outside of figures";
echo " - if figures include references to anything in the rest of the LaTeX document, they must be included directly in the LaTeX document or by the \input command";
echo " - if the standalone package is used, all standalone files must be included using the \includestandalone command. This is due to a limitation of latexpand that does not recognize standalone input files.";
echo " - all custom packages that are not present in a standard LaTeX installation must be present as .sty-files in the current directory or any of its subdirectories.";
echo " - if the 'comment' package is used, \begin{comment} ... \end{comment} blocks must be removed before applying flattenPaper.";
echo "";
echo " Required tools that must be installed:";
echo " - rename";
echo " - sponge (in package moreutils)";
echo " - latexpand";
echo " - de-macro";
echo "";
echo " For bibliography flattening, there should be no comment lines including \bibliography* in the file.";
echo "";
echo " - output .tex file is written to paper4arxiv/flattened.tex";
echo "";
echo " author: Thorben Casper";
echo " created in October 2016";
}

VERSION=0.0.1
VERBOSE=0
USAGE="'Usage: flattenPaper texFile pkgPrefix figsDir'. For more details, call 'flattenPaper -h'"

# get directory of this file (to follow symlinks, this complicated multi-line form is required)
# see https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself/246128#246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
BASEDIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# --- Options -----------------------------------------------------------------------------------------------

if [ $# == 0 ] ; then
    echo $USAGE
    exit 1;
fi

# getopts does not support long options, however, getopt does not work on, e.g., BSD systems
while getopts "h v" options; do
    case $options in
        h ) help
            exit 0
            ;;
        v ) VERBOSE=1
            ;;
       \? ) echo $USAGE
            exit 1
            ;;
    esac
done

# shift positional parameters depending on number of optional parameters
shift $(($OPTIND - 1))

# --- Compatibility -----------------------------------------------------------------------------------------

# check installed software
hash rename 2>/dev/null    || { echo >&2 "I require rename but it's not installed. Aborting.";    exit 1; }
hash sponge 2>/dev/null    || { echo >&2 "I require sponge but it's not installed. Aborting.";    exit 1; }
hash latexpand 2>/dev/null || { echo >&2 "I require latexpand but it's not installed. Aborting."; exit 1; }
hash de-macro 2>/dev/null  || { echo >&2 "I require de-macro but it's not installed. Aborting.";  exit 1; }

# --- Parsing input -----------------------------------------------------------------------------------------

TEXFILE=$1
if [ $2 ]; then
    PKGPREFIX=$2
else
    PKGPREFIX=###   # dummy, must not be matched by rename command
fi
if [ $3 ]; then
    FIGS=$3
else
    FIGS=images
fi

# --- Body --------------------------------------------------------------------------------------------------

# define directory for source files
SRC="$(dirname "$(readlink -f "$0")")/src"

# define directory for destination files
DEST=paper4arxiv

# settings
flattened='flattened' # main .tex file for the $DEST directory

# remove $DEST directory after receiving user confirmation
if [ -d $DEST ]; then
    echo -n "Do you want to delete the entire '$DEST' directory [y/n]? "
    read answer
    if [ $answer == "y" ]; then
        rm -r $DEST
    else
        echo "$0 requires to delete $DEST before execution. Please rename or move it to a different place."
        exit 1;
    fi
fi

# check whether any duplicate .sty files are present in the tree below the current directory
DUPLICATES=$(find . -type f -name "*.sty" | sed 's#.*/##' | sort |  uniq -d)
if [ ! -z "$DUPLICATES" ]; then
    printf "ERROR: There must be no duplicate .sty-files in the tree below the current directory. Duplicates found:\n $DUPLICATES\n"
    printf "exiting ...\n"
    exit 1;
fi

# copy all required source files from paper directory to new $DEST directory
mkdir $DEST
cp -t $DEST *.tex *.cls *.clo *.bib *.csv *.pdf 2>>/dev/null
cp -t $DEST $BASEDIR/flatPaper.bst #2>>/dev/null
find . -name '*.sty' -print0 | xargs -0 cp -t $DEST
cp -r $FIGS/ $DEST 2>>/dev/null
cp -r figsStandalone/ $DEST 2>>/dev/null
cp -r tabs/ $DEST 2>>/dev/null

# support for \loadglsentries
sed -i 's/\\loadglsentries/\\input/g' $TEXFILE.tex

# flatten the latex code using latexpand and keep comments to subsequently flatten bib
latexpand --keep-comments $TEXFILE.tex > $DEST/$flattened.tmp
cd $DEST
mv $GLSENTRIES.tex $GLSENTRIES.tmp
rm *.tex
mv $flattened.tmp $flattened.tex
mv $GLSENTRIES.tmp $GLSENTRIES.tex

# flatten bib
$SRC/flattenBib $flattened $VERBOSE

# apply latexpand again to remove comments
latexpand $flattened.tex | sponge $flattened.tex

# calls tikzternalize to produce .pdf files for all used tikzpictures in order to hide the source codes
$SRC/tikzternalize $flattened.tex $FIGS $VERBOSE
sed -i '/\\input{tudcolours\.def}/d' $flattened.tex

# add IEEE copyright notice
#addIEEEcopyright $flattened.tex

# expand macros (de-macro requires "-private" postfix to be added to .sty files first)
rename 's/temf(.*)\./temf$1-private\./g' *.sty
rename "s/$PKGPREFIX-(.*)\./$PKGPREFIX-\$1-private\./g" *.sty
sed -i 's/\\usepackage\(\[\?.*\]\?\){temf-\(.*\)}/\\usepackage\1{temf-\2-private}/g' $flattened.tex
sed -i "s/\\usepackage\(\[\?.*\]\?\){$PKGPREFIX-\(.*\)}/\\\\usepackage\1{$PKGPREFIX-\2-private}/g" $flattened.tex
sed -i 's/\\\\usepackage/\\usepackage/g' $flattened.tex # correct problem introduced by previous line
$SRC/rmLatexPackageOptions $flattened.tex
find . -name '*.sty' -print0 | xargs -0 sed -i 's/\\newcommand\*/\\newcommand/g' # remove star from \newcommand since not supported by de-macro
find . -name '*.sty' -print0 | xargs -0 sed -i 's/\\renewcommand\*/\\renewcommand/g' # remove star from \renewcommand since not supported by de-macro
$SRC/flattenUsepackage $flattened.tex
if [ -f "$PKGPREFIX-acronyms-private.sty" ]; then
    $SRC/flattenGlossary $flattened.tex "$PKGPREFIX-acronyms-private.sty"
fi
$SRC/de-macroFITbow $flattened.tex
de-macro       $flattened.tex
mv $flattened-clean.tex $flattened.tex
rm $flattened # remove unused by de-macro created binary file
rm temf*-private.sty $PKGPREFIX-*-private.sty 2>>/dev/null

# flatten colors (not supported right now)
#flattenColors $flattened.tex

# remove not used standalone, todonotes, pgfplots, circui(tikz), graphicspath and tikzexternalize settings
sed -i '/\\usepackage\[\?.*\]\?{standalone}/d' $flattened.tex
sed -i '/\\usepackage\[\?.*\]\?{todonotes}/d' $flattened.tex
sed -i 's/\\todo.*{.*}//g' $flattened.tex
sed -i '/\\graphicspath{{/d' $flattened.tex
sed -i '/\\usepgfplotslibrary{external}/d' $flattened.tex
sed -i '/\\tikzexternalize\[/d' $flattened.tex

# remove options from pgfplots and circui(tikz) to avoid option clash
sed -i 's/\\usepackage\[\?.*\]\?{pgfplots}/\\usepackage{pgfplots}/g' $flattened.tex
sed -i 's/\\usepackage\[\?.*\]\?{\(.*tikz\)}/\\usepackage{\1}/g' $flattened.tex

# remove any \let\xxx\undefined lines
sed -i '/\\let.*\\undefined/d' $flattened.tex

# remove any consecutive blank lines
cat -s $flattened.tex | sponge $flattened.tex 

# clean up figs directory
cd $FIGS
mkdir tmp
mv -t tmp fig*.pdf fig*.eps fig*.png fig*.jpg 2>>/dev/null
mv tmp ..
rm -r ./* 2>>/dev/null
mv ../tmp/* . 2>>/dev/null
rmdir ../tmp
rm *eps-converted-to.pdf 2>>/dev/null
cd ..

# clean up figsStandalone directory
if [ -d figsStandalone ]; then
    cd figsStandalone 2>>/dev/null
    mkdir tmp
    mv -t tmp fig*.pdf fig*.eps fig*.png fig*.jpg 2>>/dev/null
    rm ./* 2>>/dev/null
    mv tmp/* . 2>>/dev/null
    rmdir tmp
    rm *eps-converted-to.pdf . 2>>/dev/null
    cd ..
    rmdir figsStandalone 2>>/dev/null
fi

# clean up $DEST directory
rm ${flattened}_bib.tex *.bst *.spl *.suc *.syc *.upa *.upb *.aux *.auxlock *.log *.pdf *.bcf *.run.xml *.blg *.out 2>>/dev/null
rm -r tabs 2>>/dev/null

# write compile file
echo "#!/bin/bash" >> compile
echo "echo 'compiling PDF file ...'" >> compile
echo "pdflatex "$flattened.tex" >>/dev/null" >> compile
echo "pdflatex "$flattened.tex" >>/dev/null" >> compile
echo "echo 'finished compiling PDF.'" >> compile
echo "rm *.out *.spl *.aux *.log 2>>/dev/null" >> compile
chmod +x compile

# execute compile
./compile

# write zipme file
echo "#!/bin/bash" >> zipme
echo "rm -v "$flattened.zip" 2>>/dev/null" >> zipme
echo "echo 'zipping flattened paper ...'"
echo "zip" $flattened.zip $flattened.tex *.csv *.pdf $FIGS"/* >>/dev/null" >> zipme
echo "echo 'finished zipping flattened paper.'"
chmod +x zipme

# execute zipme
./zipme
echo "successfully flattened paper."

# -----------------------------------------------------------------------------------------------------------
